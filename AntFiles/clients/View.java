import java.awt.event.ActionEvent;import java.awt.event.ActionListener;import java.util.Collection;import java.util.HashMap;import javax.swing.JButton;import javax.swing.JFrame;import javax.swing.JLabel;import javax.swing.JOptionPane;import javax.swing.JPanel;import javax.swing.JTextField;import javax.swing.SpringLayout;import java.util.LinkedList;import soap.Product;public class View implements ActionListener {	public JFrame frame;	public String serviceName;	public Collection<Product> products;	public JButton buyButton;	public HashMap<String, JButton> addToCart;	public HashMap<String, JTextField> amount;	public Client client;	public int productCount;	public int clientId;	public JPanel panel;	public View(String serviceName, LinkedList<Product> products, Client client) {		this.serviceName = serviceName;		this.products = products;		System.out.println(products.get(0).getName() + " "				+ products.get(0).getItemCount());		this.productCount = products.size();		this.client = client;		this.clientId = client.getId();		this.buyButton = new JButton("Buy");		this.addToCart = new HashMap<>();		this.amount = new HashMap<>();		for (Product product : products) {			JButton button = new JButton("Add to cart");			button.addActionListener(this);			this.addToCart.put(product.getName(), button);			this.amount.put(product.getName(), new JTextField("0"));		}	}	public void createAndShowGUI() {		// Create and set up the window.		frame = new JFrame(serviceName);		frame.setLocationByPlatform(true);		frame.setDefaultCloseOperation(JFrame.EXIT_ON_CLOSE);		// Container contentPane = frame.getContentPane();		// contentPane.setLayout(new BorderLayout());		this.refreshProductPanel();		buyButton.addActionListener(this); // Action listener add	}	private void refreshProductPanel() {		panel = new JPanel(new SpringLayout());		String[] columnNames = { "Amount", "Title", "Price", "Available Amount" };		int rows = productCount + 1;		int cols = 5;		// Add column names		for (int i = 0; i < 4; i++) {			JLabel l = new JLabel(columnNames[i], JLabel.TRAILING);			panel.add(l);		}		panel.add(buyButton);		for (Product p : products) {			// amount			amount.get(p.getName()).setText("");			panel.add(amount.get(p.getName()));			// product name			JLabel name = new JLabel(p.getName(), JLabel.TRAILING);			panel.add(name);			// price			JLabel price = new JLabel(Double.toString(p.getPrice()), JLabel.TRAILING);			panel.add(price);			// available			JLabel a = new JLabel(Integer.toString(p.getItemCount()),					JLabel.TRAILING);			panel.add(a);			panel.add(addToCart.get(p.getName()));		}		// Lay out the panel.		SpringUtilities.makeCompactGrid(panel, // parent				rows, cols, 3, 3, // initX, initY				3, 3); // xPad, yPad		// Set up the content pane.		panel.setOpaque(true); // content panes must be opaque		frame.setContentPane(panel);		frame.setResizable(false);		// Display the window.		frame.pack();		frame.setVisible(true);	}	@Override	public void actionPerformed(ActionEvent e) {		if (e.getSource().equals(buyButton)) {			client.notifyServerWithBuy(clientId);			this.products = client.getProductsFromServer();			this.refreshProductPanel();		} else {			for (Product product : this.products) {				if (e.getSource().equals(addToCart.get(product.getName()))) {					String productName = product.getName();					String purchaseAmount = amount.get(product.getName()).getText();					System.out.println("add to cart " + productName							+ " clicked with value " + purchaseAmount);					int a;					try {						a = Integer.parseInt(purchaseAmount);						Product check = new Product();						check.setName(productName);						check.setItemCount(a);												if (!client.checkItemInStore(check)) {							notifyNotAvailableAmount();							this.products = client.getProductsFromServer();							this.refreshProductPanel();						} else {							client.addToCart(productName, a);						}					} catch (Exception e2) {						notifyInvalidAmount();					}				}			}		}	}	public void notifyInvalidAmount() {		JOptionPane.showMessageDialog(frame,				"The product amount needs to be a number.");	}	public void notifyNotAvailableAmount() {		JOptionPane.showMessageDialog(frame,				"The product amount needs to be in the available range.");	}	public void notifyAlreadySold() {		JOptionPane.showMessageDialog(frame,				"The product is no longer available.");	}}